plugins {
    id 'java-library'
    id "com.jfrog.bintray" version "1.8.4"  //  for release
    id "com.jfrog.artifactory" version "4.8.1"  //  for snapshot
    id 'maven-publish'
    //    id 'signing'
}

test {
    useJUnitPlatform()
}

jar {     
    // 解决MethodHandle.invoke and MethodHandle.invokeExact are only supported starting with Android O (--min-api 26)
    // 也可以在android配置中通过Proguard删除未使用的代码
    //exclude('com/openle/module/core/lambda/LambdaFactory**')
    
    //exclude('my/package/excluded/**')
}

// common.gradle已存在该task
//task sourcesJar(type: Jar, dependsOn: classes) {
//    classifier = 'sources'
//    from sourceSets.main.java.srcDirs
//}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

javadoc {
    //  For <tt>
    exclude '**/IndentedPrintWriter.java'
    exclude '**/ParameterParser.java'
}

artifacts {
    archives javadocJar
    archives sourcesJar
}


dependencies {
    testCompile("org.junit.jupiter:junit-jupiter-api:5.3.1")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:5.3.1")
}

compileJava {
    doFirst {
        options.compilerArgs = [
                    '--module-path', classpath.asPath,
        ]
        classpath = files()
    }
}


//signing {
//    sign configurations.archives
//}

// ./gradlew build bintrayUpload -PBINTRAY_API_KEY=myKey  //or 设定环境变量: export BINTRAY_API_KEY=myKey
// gradle.properties: BINTRAY_USER=wangxiaodong
// compile 'com.openle.module:core:1.0.0'
project.ext.bUser = project.hasProperty('BINTRAY_USER') ? project.property('BINTRAY_USER') : System.getenv('BINTRAY_USER')
println project.ext.bUser
project.ext.bKey = project.hasProperty('BINTRAY_API_KEY') ? project.property('BINTRAY_API_KEY') : System.getenv('BINTRAY_API_KEY')
bintray {
    user=project.ext.bUser
    key=project.ext.bKey
    configurations = ['archives']
    publish = true
    pkg {
        repo = 'maven'
        name = project.name
        userOrg = user
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/iwangxiaodong/open-java.git'
        version {
            name = project.version.toString()
            desc = project.name
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}

//  gradle artifactoryPublish
artifactory {
    //contextUrl = 'http://oss.jfrog.org/artifactory'
    publish {
        repository {
            repoKey = 'oss-snapshot-local' // The Artifactory repository key to publish to
            username = project.ext.bUser // The publisher user name
            password = project.ext.bKey // The publisher password
        }
        defaults {
            // Reference to Gradle publications defined in the build script.
            // This is how we tell the Artifactory Plugin which artifacts should be
            // published to Artifactory.
            publications('mavenJava')
            publishArtifacts = true
            // Properties to be attached to the published artifacts.
            properties = ['qa.level': 'basic', 'dev.team' : 'core']
            // Publish generated POM files to Artifactory (true by default)
            publishPom = true
        }
    }
}
