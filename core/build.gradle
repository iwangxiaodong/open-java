plugins {
    id 'java-library'
    id("maven-publish")

    //    id 'signing'
}

// Android编译器只支持到JDK11
compileJava {
    //  会覆盖sourceCompatibility
    options.release = 11
}

sourceSets {
    javaSecond {
        java {
            srcDirs = ['src/main/javaSecond']
        }
    }
}
compileJavaSecondJava {
    options.release = 12
}
jar {
    manifest {
        attributes("Multi-Release": true)
        attributes("Implementation-Title": "Open-Java",
                   "Implementation-Version": archiveVersion)
    }    
    into('META-INF/versions/12') {
        from sourceSets.javaSecond.output
    }
}

test {
    useJUnitPlatform()
}

dependencies {
    
    javaSecondImplementation files(sourceSets.main.output.classesDirs) { builtBy compileJava }

    //  测试api
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.1'
    
    //  测试引擎
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.1'
}

java {
    withJavadocJar()
    withSourcesJar()
}
publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/iwangxiaodong/open-java")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
                password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            from(components.java)
            //groupId = group
            //artifactId = name
            //version = version
        }
    }
}

//javadoc {
//  For <tt>
//exclude '**/IndentedPrintWriter.java'
//exclude '**/ParameterParser.java'
//}
/*
task javadocJar(type: Jar, dependsOn: javadoc) {
classifier = 'javadoc'
from javadoc.destinationDir
}

artifacts {
archives javadocJar
archives sourcesJar
}
 */

//jar {  
// 解决MethodHandle.invoke and MethodHandle.invokeExact are only supported starting with Android O (--min-api 26)
// 也可以在android配置中通过Proguard删除未使用的代码
//exclude('com/openle/module/core/lambda/LambdaFactory**')
    
//exclude('my/package/excluded/**')  
//}

// common.gradle已存在该task
//task sourcesJar(type: Jar, dependsOn: classes) {
//    classifier = 'sources'
//    from sourceSets.main.java.srcDirs
//}

//signing {
//    sign configurations.archives
//}